events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'upstream: $upstream_addr pool: $upstream_http_x_app_pool';

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;

    # Upstream definitions
    upstream blue_pool {
        server app_blue:3000 max_fails=2 fail_timeout=5s;
    }

    upstream green_pool {
        server app_green:3000 max_fails=2 fail_timeout=5s backup;
    }

    upstream active_pool {
        {{ if eq "$ACTIVE_POOL" "blue" }}
        server app_blue:3000 max_fails=2 fail_timeout=5s;
        server app_green:3000 max_fails=2 fail_timeout=5s backup;
        {{ else }}
        server app_green:3000 max_fails=2 fail_timeout=5s;
        server app_blue:3000 max_fails=2 fail_timeout=5s backup;
        {{ end }}
    }

    # Main server block
    server {
        listen ${NGINX_PORT};
        server_name localhost;

        # Timeout configurations for fast failure detection
        proxy_connect_timeout 2s;
        proxy_send_timeout 5s;
        proxy_read_timeout 5s;
        client_body_timeout 5s;
        client_header_timeout 5s;
        send_timeout 5s;

        # Don't buffer responses - important for real-time failover
        proxy_buffering off;

        # Main location block with retry logic
        location / {
            proxy_pass http://active_pool;
            
            # Retry configuration - retry on errors, timeouts, and 5xx status
            proxy_next_upstream error timeout http_500 http_502 http_503 http_504;
            proxy_next_upstream_timeout 8s;
            proxy_next_upstream_tries 2;
            
            # Preserve all headers from upstream
            proxy_pass_header Server;
            proxy_hide_header X-Powered-By;
            
            # Forward all upstream headers to client unchanged
            proxy_ignore_headers X-Accel-Redirect X-Accel-Expires Expires Cache-Control;
            
            # Set real client IP
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Host $host;
        }

        # Health check endpoint for load balancer
        location /nginx-health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
    }

    # Direct access to blue (for chaos testing)
    server {
        listen 8081;
        server_name localhost;
        
        location / {
            proxy_pass http://blue_pool;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Host $host;
        }
    }

    # Direct access to green (for chaos testing)
    server {
        listen 8082;
        server_name localhost;
        
        location / {
            proxy_pass http://green_pool;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Host $host;
        }
    }
}
