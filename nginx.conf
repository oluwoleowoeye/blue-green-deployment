events {
    worker_connections 1024;
}

http {
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" "$http_user_agent" '
                    '"$upstream_addr" "$upstream_status" "$upstream_http_x_app_pool" '
                    '"$upstream_http_x_release_id" "$upstream_http_x_version"';

    access_log /var/log/nginx/access.log main;

    upstream app_backend {
        # PRIMARY: Blue with tight failure detection
        server app_blue:3000 max_fails=1 fail_timeout=3s;
        
        # BACKUP: Green (only used when Blue fails)
        server app_green:3000 backup;
    }

    server {
        listen 8080;  # PUBLIC ENTRYPOINT
        
        location / {
            proxy_pass http://app_backend;
            
            # Tight timeouts for quick failure detection
            proxy_connect_timeout 1s;
            proxy_send_timeout 2s;
            proxy_read_timeout 2s;
            
            # Retry policy for error, timeout, and http_5xx
            proxy_next_upstream error timeout http_500 http_502 http_503 http_504;
            proxy_next_upstream_tries 2;
            proxy_next_upstream_timeout 2s;
            
            # Forward ALL app headers unchanged from wonderful image
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Preserve all upstream headers from wonderful app
            proxy_pass_header X-App-Pool;
            proxy_pass_header X-Release-Id;
            proxy_pass_header X-Version;
            proxy_pass_header Server;
            proxy_pass_header Date;
        }

        # Health check endpoint
        location /health {
            proxy_pass http://app_backend/health;
            access_log off;
        }
    }

    # Blue direct port (8081) - for chaos testing
    server {
        listen 8081;
        location / {
            proxy_pass http://app_blue:3000;
            proxy_set_header Host $host;
            proxy_pass_header X-App-Pool;
            proxy_pass_header X-Release-Id;
            proxy_pass_header X-Version;
        }
    }

    # Green direct port (8082)
    server {
        listen 8082;
        location / {
            proxy_pass http://app_green:3000;
            proxy_set_header Host $host;
            proxy_pass_header X-App-Pool;
            proxy_pass_header X-Release-Id;
            proxy_pass_header X-Version;
        }
    }
}
